/* -----------------------  cell's rest  ------------------------ */

@mixin generateCellRest($breakpoint : null) {

	.cell-rest#{$breakpoint},
	.cell-rest-no-gutters#{$breakpoint},
	.cell-rest-no-gutter-right#{$breakpoint},
	.cell-rest-no-gutter-left#{$breakpoint} {
		flex: 1;
	}

	.cell-rest#{$breakpoint},
	.cell-rest-no-gutter-right {
		margin-left: $cells_gutter;
	}
	.cell-rest#{$breakpoint},
	.cell-rest-no-gutter-left {
		margin-right: $cells_gutter;
	}
}

/* -----------------------  cells & gutters  ------------------------ */

@mixin generateCells($breakpoint : null) {

	@for $iteratorValue from 1 through $number_of_cells {

		.cell-#{getCellSize($iteratorValue)}#{$breakpoint} {
			flex-basis: getGuttersCellWidth($iteratorValue, $cells_gutter);
			margin-right: $cells_gutter;
			margin-left: $cells_gutter;
			max-width: getGuttersCellWidth($iteratorValue, $cells_gutter);
		}

		.cell-#{getCellSize($iteratorValue)}-no-gutters#{$breakpoint} {
			flex-basis: getNoGuttersCellWidth($iteratorValue);
			max-width: getNoGuttersCellWidth($iteratorValue);
		}

		.cell-#{getCellSize($iteratorValue)}-no-gutter-right#{$breakpoint},
		.cell-#{getCellSize($iteratorValue)}-no-gutter-left#{$breakpoint} {
			flex-basis: getOneSideGutterCellWidth($iteratorValue, $cells_gutter);
			max-width: getOneSideGutterCellWidth($iteratorValue, $cells_gutter);
		}

		.cell-#{getCellSize($iteratorValue)}-no-gutters#{$breakpoint},
		.cell-#{getCellSize($iteratorValue)}-no-gutter-right#{$breakpoint} {
			margin-right: 0;
		}

		.cell-#{getCellSize($iteratorValue)}-no-gutters#{$breakpoint},
		.cell-#{getCellSize($iteratorValue)}-no-gutter-left#{$breakpoint} {
			margin-left: 0;
		}

		.cell-#{getCellSize($iteratorValue)}-no-gutter-left#{$breakpoint} {
			margin-right: $cells_gutter;
		}

		.cell-#{getCellSize($iteratorValue)}-no-gutter-right#{$breakpoint} {
			margin-left: $cells_gutter;
		}

	}

}

/* -----------------------  correct cells  ------------------------ */

@mixin generateCorrectCells($breakpoint : null) {

	.row-column#{$breakpoint} > [class*="cell-"],
	.direction-column#{$breakpoint} > [class*="cell-"],
	.row-column-reverse#{$breakpoint} > [class*="cell-"],
	.direction-column-reverse#{$breakpoint} > [class*="cell-"] {
		flex-basis: auto;
		max-width: initial;
	}

}

/* -----------------------  cells push and pull  ------------------------ */

@mixin generateCellPushAndPull($breakpoint : null) {

	/* todo : maybe push and pull nogutters  ????*/

	/* :::: push :::: */
	@for $iteratorValue from 1 through ($number_of_cells + 1) {

		[class*="cell-"].push-#{getCellSize($iteratorValue)}#{$breakpoint} {
			left: getNoGuttersCellWidth($iteratorValue);
		}

	}

	/* :::: pull :::: */
	@for $iteratorValue from 1 through ($number_of_cells + 1) {

		[class*="cell-"].pull-#{getCellSize($iteratorValue)}#{$breakpoint} {
			right: getNoGuttersCellWidth($iteratorValue);
		}

	}
}

/* -----------------------  cells offset  ------------------------ */

@mixin generateCellOffset($breakpoint : null) {

	@for $iteratorValue from 1 through ($number_of_cells + 1) {

		[class*="cell-"].offset-#{getCellSize($iteratorValue)}#{$breakpoint} {
			margin-left: calc(#{getNoGuttersCellWidth($iteratorValue)} + #{$cells_gutter});
		}

	}

	/* offset no gutters */

	@for $iteratorValue from 1 through ($number_of_cells + 1) {

		[class*="cell-"].offset-#{getCellSize($iteratorValue)}-no-gutters#{$breakpoint} {
			margin-left: #{getNoGuttersCellWidth($iteratorValue)}
		}

	}
}