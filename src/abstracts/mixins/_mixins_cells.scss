/* -----------------------  cell's rest  ------------------------ */

@mixin generateCellRest($breakpoint : null) {

	.cell-rest#{$breakpoint} {
		flex: 1;
		/* todo : margin par dÃ©faut ? !!! */
	}

	.cell-rest.no-gutters#{$breakpoint} {
		margin: 0;
	}
}

@mixin generateGutters($breakpoint: null) {

	@each $cell_gutter in $cell_gutters {
		.gutter-#{nth($cell_gutter, 1)}-#{$breakpoint} {
			margin: nth($cell_gutter, 2);
		}
	}
}

/* -----------------------  cells & gutters  ------------------------ */

@mixin generateCells($breakpoint : null) {

	@for $iteratorValue from 1 through $number_of_cells {

		@each $cell_gutter in $cell_gutters {
			.cell-#{getCellSize($iteratorValue)}#{$breakpoint} {

				flex-basis: getGuttersCellWidth($iteratorValue, nth($cell_gutter, 2));
				margin: $cell_gutter;
				max-width: getGuttersCellWidth($iteratorValue, nth($cell_gutter, 2));
			}
		}

		.cell-#{getCellSize($iteratorValue)}-no-gutters#{$breakpoint} {
			flex-basis: getNoGuttersCellWidth($iteratorValue);
			margin: 0;
			max-width: getNoGuttersCellWidth($iteratorValue);
		}

	}

}

/* -----------------------  correct cells  ------------------------ */

@mixin generateCorrectCells($breakpoint : null) {

	.grid-column#{$breakpoint} > [class*="cell-"],
	.direction-column#{$breakpoint} > [class*="cell-"],
	.grid-column-reverse#{$breakpoint} > [class*="cell-"],
	.direction-column-reverse#{$breakpoint} > [class*="cell-"] {
		flex-basis: auto;
		max-width: initial;
	}

}

/* -----------------------  cells push and pull  ------------------------ */

@mixin generateCellPushAndPull($breakpoint : null) {

	/* :::: push :::: */
	@for $iteratorValue from 1 through ($number_of_cells + 1) {

		[class*="cell-"].push-#{getCellSize($iteratorValue)}#{$breakpoint} {
			left: getNoGuttersCellWidth($iteratorValue);
		}

	}

	/* :::: pull :::: */
	@for $iteratorValue from 1 through ($number_of_cells + 1) {

		[class*="cell-"].pull-#{getCellSize($iteratorValue)}#{$breakpoint} {
			right: getNoGuttersCellWidth($iteratorValue);
		}

	}
}

/* -----------------------  cells offset  ------------------------ */

@mixin generateCellOffset($breakpoint : null) {

	@for $iteratorValue from 1 through ($number_of_cells + 1) {

		@each $cell_gutter in $cell_gutters {
			[class*="cell-"].offset-#{getCellSize($iteratorValue)}#{$breakpoint} {
				margin-left: calc(#{getNoGuttersCellWidth($iteratorValue)} + #{nth($cell_gutter, 2)});
			}
		}

	}

	/* offset no gutters */

	@for $iteratorValue from 1 through ($number_of_cells + 1) {

		[class*="cell-"].offset-#{getCellSize($iteratorValue)}-no-gutters#{$breakpoint} {
			margin-left: #{getNoGuttersCellWidth($iteratorValue)}
		}

	}
}